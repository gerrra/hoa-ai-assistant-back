name: Deploy backend to prod

on:
  push: { branches: [ main ] }
  workflow_dispatch: {}

concurrency:
  group: deploy-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check secrets
        run: |
          test -n "${{ secrets.SSH_HOST }}" || { echo "SSH_HOST empty"; exit 1; }
          test -n "${{ secrets.SSH_USER }}" || { echo "SSH_USER empty"; exit 1; }
          test -n "${{ secrets.SSH_KEY }}"  || { echo "SSH_KEY empty";  exit 1; }

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_KEY }}

      - name: Add known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "Scanning host key..."
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy over SSH
        env:
          HOST: ${{ secrets.SSH_HOST }}
          USER: ${{ secrets.SSH_USER }}
          PORT: ${{ secrets.SSH_PORT || 22 }}
        run: |
          ssh -o StrictHostKeyChecking=yes -p "$PORT" "$USER@$HOST" bash -s <<'SSH'
          set -euo pipefail

          # 1) код бэка
          if [ -d /opt/hoa-assistant/back/.git ]; then
            cd /opt/hoa-assistant/back && git fetch --all && git reset --hard origin/main
          else
            mkdir -p /opt/hoa-assistant
            git clone git@github.com:gerrra/hoa-ai-assistant-back.git /opt/hoa-assistant/back
          fi

          # 2) билд и запуск API
          cd /opt/hoa-assistant/deploy/prod
          docker compose -f docker-compose.prod.yml up -d --build api || true

          # 3) дождаться health (если нет --wait)
          cid=$(docker compose -f docker-compose.prod.yml ps -q api)
          for i in {1..30}; do
            st=$(docker inspect -f '{{.State.Health.Status}}' "$cid" 2>/dev/null || echo starting)
            echo "api health: $st"
            [ "$st" = healthy ] && break
            sleep 3
          done
          [ "$st" = healthy ] || { echo "API not healthy"; exit 1; }

          # 4) финальная проверка
          docker compose -f docker-compose.prod.yml exec -T api \
            python -c 'import urllib.request;print(urllib.request.urlopen("http://127.0.0.1:8000/health", timeout=5).read().decode())'
          SSH
